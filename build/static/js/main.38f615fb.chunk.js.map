{"version":3,"sources":["slices/userInfoSlice.ts","hooks/useAppDispatch.ts","hooks/useWallet.tsx","hooks/useAppSelector.ts","components/WalletInfo/index.tsx","contexts/Web3Context.tsx","components/MetamaskConnect/index.tsx","utils/contract.tsx","pages/Home.tsx","pages/Transfer.tsx","App.tsx","reportWebVitals.ts","store.ts","index.tsx"],"names":["userInfoSlice","createSlice","name","initialState","address","balance","reducers","getAddress","state","payload","getBalance","actions","useAppDispatch","useDispatch","useWallet","dispatch","useState","setAddress","provider","a","signer","getSigner","console","log","window","ethereum","request","method","addressArray","length","getWalletAddress","isConnected","useAppSelector","useSelector","WalletInfo","userInfo","screen","style","width","slice","display","justifyContent","to","defaultState","undefined","updateProvider","Web3Context","React","createContext","MetamaskConnect","error","setError","useContext","enable","ethers","providers","Web3Provider","message","primary","onClick","position","type","ToastType","ERROR","title","body","timeout","onClose","closable","getContractData","abi","Contract","Home","web3Provider","wallet","setIsConnected","getWalletBalance","tokenData","contract","balanceOf","parsedBalance","utils","formatUnits","useEffect","setComponentData","className","activePage","Transfer","recipient","setRecipient","amount","setAmount","setContract","isSending","setIsSending","successfulTx","setSuccessfulTx","formError","setFormError","contractData","transfer","tx","wait","txResult","status","size","open","Header","Content","label","value","placeholder","onChange","e","target","test","trim","Actions","loading","INFO","App","setProvider","getProvider","Provider","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","userInfoReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38f615fb.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { createSelector } from \"reselect\";\n// Define a type for the slice state\ninterface UserInfoState {\n  address: string;\n  balance: number;\n}\n\n// Define the initial state using that type\nconst initialState: UserInfoState = {\n  address: \"\",\n  balance: 0,\n};\n\nexport const userInfoSlice = createSlice({\n  name: \"userInfo\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    getAddress: (state, { payload }) => {\n      state.address = payload;\n    },\n    getBalance: (state, { payload }) => {\n      state.balance = payload;\n    },\n  },\n});\n\nexport const { getAddress, getBalance } = userInfoSlice.actions;\n\nexport default userInfoSlice.reducer;\n","import { useDispatch } from \"react-redux\";\nimport type { AppDispatch } from \"./../store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n","import { useState } from \"react\";\nimport { getAddress } from \"../slices/userInfoSlice\";\nimport { useAppDispatch } from \"./useAppDispatch\";\nimport ethers from \"ethers\";\n\nexport default function useWallet() {\n  const dispatch = useAppDispatch();\n  const [address, setAddress] = useState<string>();\n\n  async function getWalletAddress(provider: ethers.providers.Web3Provider) {\n    try {\n      const signer: ethers.ethers.providers.JsonRpcSigner =\n        provider?.getSigner();\n\n      const address: string | undefined = await signer?.getAddress();\n      setAddress(address);\n      dispatch(getAddress(address));\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async function isConnected(): Promise<Boolean> {\n    try {\n      if (!window.ethereum) return false;\n      const addressArray: String[] = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n\n      return addressArray.length > 0;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  return { address, getWalletAddress, isConnected };\n}\n","import { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport type { RootState } from \"./../store\";\n\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Header, Segment, Center } from \"decentraland-ui\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport { Link } from \"react-router-dom\";\n\nfunction WalletInfo() {\n  const userInfo = useAppSelector((state) => state.userInfo);\n\n  function shortenedAddress(address: string): string {\n    return address.slice(0, 5) + \"...\" + address.slice(38, 42);\n  }\n\n  return (\n    <Center screen>\n      <Segment style={{ width: 300 }}>\n        <Header>Wallet</Header>\n        <p>\n          <strong>Wallet: </strong>\n          <span>{shortenedAddress(userInfo.address)}</span>\n        </p>\n        <p style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n          <span>\n            <strong>Balance:</strong> {userInfo.balance} DUMMY\n          </span>\n          <Link to=\"/transfer\">TRANSFER</Link>\n        </p>\n      </Segment>\n    </Center>\n  );\n}\n\nexport default WalletInfo;\n","import React from \"react\";\nimport { ethers } from \"ethers\";\n\ninterface IWeb3Context {\n  provider: ethers.providers.Web3Provider | undefined;\n  updateProvider: (provider: ethers.providers.Web3Provider) => void;\n}\n\nconst defaultState = {\n  provider: undefined,\n  updateProvider: () => {},\n};\n\nconst Web3Context = React.createContext<IWeb3Context>(defaultState);\n\nexport default Web3Context;\n","import Web3Context from \"contexts/Web3Context\";\nimport { Center, Button, Toasts, Toast, ToastType } from \"decentraland-ui\";\nimport { ethers } from \"ethers\";\nimport { useContext, useState } from \"react\";\n\nfunction MetamaskConnect() {\n  const [error, setError] = useState<string>(\"\");\n  const { updateProvider } = useContext(Web3Context);\n\n  async function handleProvider() {\n    setError(\"\");\n\n    try {\n      await window.ethereum.enable();\n      const provider: ethers.providers.Web3Provider =\n        new ethers.providers.Web3Provider(window.ethereum, \"any\");\n\n      updateProvider && updateProvider(provider);\n    } catch (err: any) {\n      setError(err.message);\n    }\n  }\n\n  return (\n    <Center>\n      <Button primary onClick={handleProvider}>\n        Connect\n      </Button>\n      {error && (\n        <Toasts position=\"top right\">\n          <Toast\n            type={ToastType.ERROR}\n            title=\"Error\"\n            body={error}\n            timeout={2}\n            onClose={() => setError(\"\")}\n            closable\n          />\n        </Toasts>\n      )}\n    </Center>\n  );\n}\n\nexport default MetamaskConnect;\n","import { ethers } from \"ethers\";\n\nexport function getContractData(\n  address: string,\n  abi: ethers.ContractInterface,\n  provider: ethers.providers.Web3Provider\n) {\n  if (!address || !abi || !provider) return;\n\n  const contract = new ethers.Contract(address, abi, provider?.getSigner());\n  return contract;\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { Navbar, Page, Header, Footer, Modal } from \"decentraland-ui\";\nimport useWallet from \"hooks/useWallet\";\nimport { ethers } from \"ethers\";\nimport { useAppSelector } from \"hooks/useAppSelector\";\nimport { useAppDispatch } from \"hooks/useAppDispatch\";\nimport { getBalance } from \"slices/userInfoSlice\";\n\nimport WalletInfo from \"components/WalletInfo\";\nimport Web3Context from \"contexts/Web3Context\";\nimport MetamaskConnect from \"components/MetamaskConnect\";\nimport { getContractData } from \"utils/contract\";\nimport tokenData from \"abi/token.json\";\n\nfunction Home() {\n  const web3Provider = useContext(Web3Context);\n  const wallet = useWallet();\n  const userInfo = useAppSelector((state) => state.userInfo);\n  const dispatch = useAppDispatch();\n\n  const [isConnected, setIsConnected] = useState<Boolean>(false);\n\n  useEffect(() => {\n    getWalletBalance();\n  }, [userInfo]);\n\n  useEffect(() => {\n    setComponentData();\n  }, [web3Provider.provider]);\n\n  async function setComponentData() {\n    const isConnected: Boolean = await wallet.isConnected();\n    setIsConnected(isConnected);\n    if (isConnected && web3Provider?.provider) {\n      wallet.getWalletAddress(web3Provider.provider);\n      getWalletBalance();\n    }\n  }\n\n  async function getWalletBalance() {\n    if (userInfo?.address) {\n      const contract = await getContractData(\n        tokenData.address,\n        tokenData.abi,\n        web3Provider.provider!\n      );\n\n      const balance: ethers.BigNumber = await contract?.balanceOf(\n        userInfo.address\n      );\n      const parsedBalance: String = ethers.utils.formatUnits(balance, 0);\n      dispatch(getBalance(parsedBalance));\n    }\n  }\n\n  return (\n    <>\n      <div className=\"Page-story-container\">\n        <Navbar activePage=\"marketplace\" />\n        <Page>{!isConnected ? <MetamaskConnect /> : <WalletInfo />}</Page>\n        <Footer />\n      </div>\n    </>\n  );\n}\n\nexport default Home;\n","import { useContext, useEffect, useState } from \"react\";\nimport {\n  Button,\n  Navbar,\n  Page,\n  Footer,\n  Modal,\n  Field,\n  Toasts,\n  Toast,\n  ToastType,\n} from \"decentraland-ui\";\nimport useWallet from \"hooks/useWallet\";\nimport { ethers } from \"ethers\";\nimport Web3Context from \"contexts/Web3Context\";\nimport MetamaskConnect from \"components/MetamaskConnect\";\nimport { getContractData } from \"utils/contract\";\nimport tokenData from \"abi/token.json\";\n\ninterface ErrorField {\n  amount?: boolean;\n  recipient?: boolean;\n}\n\nfunction Transfer() {\n  const web3Provider = useContext(Web3Context);\n  const wallet = useWallet();\n\n  const [recipient, setRecipient] = useState<string>();\n  const [amount, setAmount] = useState<string>(\"0\");\n  const [isConnected, setIsConnected] = useState<Boolean>(false);\n  const [contract, setContract] = useState<ethers.Contract>();\n  const [isSending, setIsSending] = useState<boolean>(false);\n  const [successfulTx, setSuccessfulTx] = useState<boolean>(false);\n  const [formError, setFormError] = useState<ErrorField>({\n    amount: false,\n    recipient: false,\n  });\n  const [error, setError] = useState<string>(\"\");\n\n  useEffect(() => {\n    setComponentData();\n  }, [web3Provider.provider]);\n\n  async function setComponentData() {\n    const isConnected: Boolean = await wallet.isConnected();\n    setIsConnected(isConnected);\n\n    if (isConnected && web3Provider.provider) {\n      try {\n        const contractData: ethers.Contract | undefined = await getContractData(\n          tokenData.address,\n          tokenData.abi,\n          web3Provider.provider\n        );\n\n        setContract(contractData);\n      } catch (err: any) {\n        setError(err.message);\n      }\n    }\n  }\n\n  async function handleClick() {\n    setFormError({\n      amount: false,\n      recipient: false,\n    });\n\n    if (contract && !isSending) {\n      if (recipient && amount) {\n        try {\n          setIsSending(true);\n          const tx = await contract.transfer(recipient, amount);\n          const txResult = await tx.wait();\n          setSuccessfulTx(txResult.status == 1);\n          setIsSending(false);\n        } catch (err: any) {\n          setError(err.message);\n          setIsSending(false);\n        }\n      } else {\n        setFormError({\n          amount: !amount ? true : amount.length == 0,\n          recipient: !recipient ? true : recipient.length == 0,\n        });\n      }\n    }\n  }\n\n  function sanitizeAmount(value: string) {\n    const validator = /^[0-9\\b]+$/;\n    if (validator.test(value) || value == \"\") {\n      setAmount(value);\n    } else {\n      return;\n    }\n  }\n\n  return (\n    <>\n      <Navbar activePage=\"marketplace\" />\n      <Page>\n        {!isConnected ? (\n          <MetamaskConnect />\n        ) : (\n          <Modal size=\"small\" open={true}>\n            <Modal.Header>Transfer</Modal.Header>\n            <Modal.Content>\n              <Field\n                name=\"amount\"\n                label=\"Amount\"\n                value={amount}\n                placeholder=\"10 DUMMY\"\n                onChange={(e: any) => sanitizeAmount(e.target.value)}\n                error={!amount && formError.amount}\n              />\n              <Field\n                name=\"recipient\"\n                type=\"address\"\n                label=\"Send to\"\n                placeholder=\"0x...\"\n                onChange={(e) => setRecipient(e.target.value.trim())}\n                error={!recipient && formError.recipient}\n              />\n            </Modal.Content>\n            <Modal.Actions>\n              <Button primary onClick={handleClick} loading={isSending}>\n                Transfer\n              </Button>\n            </Modal.Actions>\n            {successfulTx && (\n              <Toasts position=\"top right\">\n                <Toast\n                  type={ToastType.INFO}\n                  title=\"Success\"\n                  body=\"Succesful transaction\"\n                  timeout={2}\n                  onClose={() => setSuccessfulTx(false)}\n                  closable\n                />\n              </Toasts>\n            )}\n          </Modal>\n        )}\n        {error && (\n          <Toasts position=\"top right\">\n            <Toast\n              type={ToastType.ERROR}\n              title=\"Error\"\n              body={error}\n              timeout={2}\n              onClose={() => setError(\"\")}\n              closable\n            />\n          </Toasts>\n        )}\n      </Page>\n      <Footer />\n    </>\n  );\n}\n\nexport default Transfer;\n","import \"./App.css\";\nimport \"decentraland-ui/lib/styles.css\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Home from \"pages/Home\";\nimport Transfer from \"pages/Transfer\";\nimport Web3Context from \"contexts/Web3Context\";\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport useWallet from \"hooks/useWallet\";\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nfunction App() {\n  const [provider, setProvider] = useState<ethers.providers.Web3Provider>();\n  const wallet = useWallet();\n  const [isConnected, setIsConnected] = useState<Boolean>(false);\n\n  function updateProvider(provider: ethers.providers.Web3Provider) {\n    setProvider(provider);\n  }\n\n  useEffect(() => {\n    setComponentData();\n  }, []);\n\n  async function setComponentData() {\n    const isConnected = await wallet.isConnected();\n    setIsConnected(isConnected);\n\n    if (isConnected) {\n      getProvider();\n    }\n  }\n  async function getProvider() {\n    try {\n      await window.ethereum.enable();\n      const provider = new ethers.providers.Web3Provider(\n        window.ethereum,\n        \"any\"\n      );\n\n      setProvider(provider);\n    } catch (err) {\n      console.log(\"There was an error when getting provider\");\n    }\n  }\n\n  return (\n    <Web3Context.Provider value={{ provider, updateProvider }}>\n      <div className=\"App\">\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/\" element={<Home />}></Route>\n            <Route path=\"/transfer\" element={<Transfer />}></Route>\n          </Routes>\n        </BrowserRouter>\n      </div>\n    </Web3Context.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport userInfoReducer from \"./slices/userInfoSlice\";\n\nconst store = configureStore({\n  reducer: {\n    userInfo: userInfoReducer,\n  },\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}